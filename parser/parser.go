package parser

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

// LoadGoJSON is a very forgiving JSON parser.
// takes a json file generated by go tool test2json and returns all test events.
func LoadGoJSON(path string) ([]TestEvent, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	events := []TestEvent{}
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		// Go's -json output is line-by-line JSON events
		b := scanner.Bytes()
		if b[0] == '{' {
			ev := TestEvent{}
			err = json.Unmarshal(b, &ev)
			if err != nil {
				continue
			}
			events = append(events, ev)
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return events, err
}

// processEvents group events by their test name
func processEvents(evs []TestEvent) []TestGroup {
	gm := map[string]int{}
	groups := []TestGroup{}
	for _, e := range evs {
		if e.Test == "" {
			continue
		}
		index, ok := gm[e.Test]
		if !ok {
			index = len(groups)
			groups = append(groups, TestGroup{
				TestName: e.Test,
				Start:    e.Time,
			})
			gm[e.Test] = index
		}
		e.Output = strings.Trim(e.Output, " ")
		groups[index].Events = append(groups[index].Events, e)
		groups[index].Status = e.Action
	}

	// Hide ancestors
	for k, v := range gm {
		for k2 := range gm {
			if strings.HasPrefix(k2, fmt.Sprintf("%s/", k)) {
				groups[v].Hidden = true
			}
		}
	}

	return groups
}
